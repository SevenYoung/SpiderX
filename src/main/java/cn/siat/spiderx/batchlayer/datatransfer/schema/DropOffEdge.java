/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.siat.spiderx.batchlayer.datatransfer.schema;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-08")
public class DropOffEdge implements org.apache.thrift.TBase<DropOffEdge, DropOffEdge._Fields>, java.io.Serializable, Cloneable, Comparable<DropOffEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DropOffEdge");

  private static final org.apache.thrift.protocol.TField CAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("car_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DROPOFF_COORD_FIELD_DESC = new org.apache.thrift.protocol.TField("dropoff_coord", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ROAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("road_id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DropOffEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DropOffEdgeTupleSchemeFactory());
  }

  public CarID car_id; // required
  public Coordinate dropoff_coord; // required
  public long identity; // required
  public RoadId road_id; // optional
  public double distance; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAR_ID((short)1, "car_id"),
    DROPOFF_COORD((short)2, "dropoff_coord"),
    IDENTITY((short)3, "identity"),
    ROAD_ID((short)4, "road_id"),
    DISTANCE((short)5, "distance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAR_ID
          return CAR_ID;
        case 2: // DROPOFF_COORD
          return DROPOFF_COORD;
        case 3: // IDENTITY
          return IDENTITY;
        case 4: // ROAD_ID
          return ROAD_ID;
        case 5: // DISTANCE
          return DISTANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDENTITY_ISSET_ID = 0;
  private static final int __DISTANCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ROAD_ID,_Fields.DISTANCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAR_ID, new org.apache.thrift.meta_data.FieldMetaData("car_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CarID.class)));
    tmpMap.put(_Fields.DROPOFF_COORD, new org.apache.thrift.meta_data.FieldMetaData("dropoff_coord", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coordinate.class)));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROAD_ID, new org.apache.thrift.meta_data.FieldMetaData("road_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoadId.class)));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DropOffEdge.class, metaDataMap);
  }

  public DropOffEdge() {
  }

  public DropOffEdge(
    CarID car_id,
    Coordinate dropoff_coord,
    long identity)
  {
    this();
    this.car_id = car_id;
    this.dropoff_coord = dropoff_coord;
    this.identity = identity;
    setIdentityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DropOffEdge(DropOffEdge other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCar_id()) {
      this.car_id = new CarID(other.car_id);
    }
    if (other.isSetDropoff_coord()) {
      this.dropoff_coord = new Coordinate(other.dropoff_coord);
    }
    this.identity = other.identity;
    if (other.isSetRoad_id()) {
      this.road_id = new RoadId(other.road_id);
    }
    this.distance = other.distance;
  }

  public DropOffEdge deepCopy() {
    return new DropOffEdge(this);
  }

  @Override
  public void clear() {
    this.car_id = null;
    this.dropoff_coord = null;
    setIdentityIsSet(false);
    this.identity = 0;
    this.road_id = null;
    setDistanceIsSet(false);
    this.distance = 0.0;
  }

  public CarID getCar_id() {
    return this.car_id;
  }

  public DropOffEdge setCar_id(CarID car_id) {
    this.car_id = car_id;
    return this;
  }

  public void unsetCar_id() {
    this.car_id = null;
  }

  /** Returns true if field car_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCar_id() {
    return this.car_id != null;
  }

  public void setCar_idIsSet(boolean value) {
    if (!value) {
      this.car_id = null;
    }
  }

  public Coordinate getDropoff_coord() {
    return this.dropoff_coord;
  }

  public DropOffEdge setDropoff_coord(Coordinate dropoff_coord) {
    this.dropoff_coord = dropoff_coord;
    return this;
  }

  public void unsetDropoff_coord() {
    this.dropoff_coord = null;
  }

  /** Returns true if field dropoff_coord is set (has been assigned a value) and false otherwise */
  public boolean isSetDropoff_coord() {
    return this.dropoff_coord != null;
  }

  public void setDropoff_coordIsSet(boolean value) {
    if (!value) {
      this.dropoff_coord = null;
    }
  }

  public long getIdentity() {
    return this.identity;
  }

  public DropOffEdge setIdentity(long identity) {
    this.identity = identity;
    setIdentityIsSet(true);
    return this;
  }

  public void unsetIdentity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return EncodingUtils.testBit(__isset_bitfield, __IDENTITY_ISSET_ID);
  }

  public void setIdentityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDENTITY_ISSET_ID, value);
  }

  public RoadId getRoad_id() {
    return this.road_id;
  }

  public DropOffEdge setRoad_id(RoadId road_id) {
    this.road_id = road_id;
    return this;
  }

  public void unsetRoad_id() {
    this.road_id = null;
  }

  /** Returns true if field road_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRoad_id() {
    return this.road_id != null;
  }

  public void setRoad_idIsSet(boolean value) {
    if (!value) {
      this.road_id = null;
    }
  }

  public double getDistance() {
    return this.distance;
  }

  public DropOffEdge setDistance(double distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAR_ID:
      if (value == null) {
        unsetCar_id();
      } else {
        setCar_id((CarID)value);
      }
      break;

    case DROPOFF_COORD:
      if (value == null) {
        unsetDropoff_coord();
      } else {
        setDropoff_coord((Coordinate)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((Long)value);
      }
      break;

    case ROAD_ID:
      if (value == null) {
        unsetRoad_id();
      } else {
        setRoad_id((RoadId)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAR_ID:
      return getCar_id();

    case DROPOFF_COORD:
      return getDropoff_coord();

    case IDENTITY:
      return getIdentity();

    case ROAD_ID:
      return getRoad_id();

    case DISTANCE:
      return getDistance();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAR_ID:
      return isSetCar_id();
    case DROPOFF_COORD:
      return isSetDropoff_coord();
    case IDENTITY:
      return isSetIdentity();
    case ROAD_ID:
      return isSetRoad_id();
    case DISTANCE:
      return isSetDistance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DropOffEdge)
      return this.equals((DropOffEdge)that);
    return false;
  }

  public boolean equals(DropOffEdge that) {
    if (that == null)
      return false;

    boolean this_present_car_id = true && this.isSetCar_id();
    boolean that_present_car_id = true && that.isSetCar_id();
    if (this_present_car_id || that_present_car_id) {
      if (!(this_present_car_id && that_present_car_id))
        return false;
      if (!this.car_id.equals(that.car_id))
        return false;
    }

    boolean this_present_dropoff_coord = true && this.isSetDropoff_coord();
    boolean that_present_dropoff_coord = true && that.isSetDropoff_coord();
    if (this_present_dropoff_coord || that_present_dropoff_coord) {
      if (!(this_present_dropoff_coord && that_present_dropoff_coord))
        return false;
      if (!this.dropoff_coord.equals(that.dropoff_coord))
        return false;
    }

    boolean this_present_identity = true;
    boolean that_present_identity = true;
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (this.identity != that.identity)
        return false;
    }

    boolean this_present_road_id = true && this.isSetRoad_id();
    boolean that_present_road_id = true && that.isSetRoad_id();
    if (this_present_road_id || that_present_road_id) {
      if (!(this_present_road_id && that_present_road_id))
        return false;
      if (!this.road_id.equals(that.road_id))
        return false;
    }

    boolean this_present_distance = true && this.isSetDistance();
    boolean that_present_distance = true && that.isSetDistance();
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_car_id = true && (isSetCar_id());
    list.add(present_car_id);
    if (present_car_id)
      list.add(car_id);

    boolean present_dropoff_coord = true && (isSetDropoff_coord());
    list.add(present_dropoff_coord);
    if (present_dropoff_coord)
      list.add(dropoff_coord);

    boolean present_identity = true;
    list.add(present_identity);
    if (present_identity)
      list.add(identity);

    boolean present_road_id = true && (isSetRoad_id());
    list.add(present_road_id);
    if (present_road_id)
      list.add(road_id);

    boolean present_distance = true && (isSetDistance());
    list.add(present_distance);
    if (present_distance)
      list.add(distance);

    return list.hashCode();
  }

  @Override
  public int compareTo(DropOffEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCar_id()).compareTo(other.isSetCar_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCar_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.car_id, other.car_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDropoff_coord()).compareTo(other.isSetDropoff_coord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDropoff_coord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dropoff_coord, other.dropoff_coord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoad_id()).compareTo(other.isSetRoad_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoad_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.road_id, other.road_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DropOffEdge(");
    boolean first = true;

    sb.append("car_id:");
    if (this.car_id == null) {
      sb.append("null");
    } else {
      sb.append(this.car_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dropoff_coord:");
    if (this.dropoff_coord == null) {
      sb.append("null");
    } else {
      sb.append(this.dropoff_coord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity:");
    sb.append(this.identity);
    first = false;
    if (isSetRoad_id()) {
      if (!first) sb.append(", ");
      sb.append("road_id:");
      if (this.road_id == null) {
        sb.append("null");
      } else {
        sb.append(this.road_id);
      }
      first = false;
    }
    if (isSetDistance()) {
      if (!first) sb.append(", ");
      sb.append("distance:");
      sb.append(this.distance);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (car_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'car_id' was not present! Struct: " + toString());
    }
    if (dropoff_coord == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dropoff_coord' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'identity' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (dropoff_coord != null) {
      dropoff_coord.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DropOffEdgeStandardSchemeFactory implements SchemeFactory {
    public DropOffEdgeStandardScheme getScheme() {
      return new DropOffEdgeStandardScheme();
    }
  }

  private static class DropOffEdgeStandardScheme extends StandardScheme<DropOffEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DropOffEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.car_id = new CarID();
              struct.car_id.read(iprot);
              struct.setCar_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DROPOFF_COORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dropoff_coord = new Coordinate();
              struct.dropoff_coord.read(iprot);
              struct.setDropoff_coordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.identity = iprot.readI64();
              struct.setIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.road_id = new RoadId();
              struct.road_id.read(iprot);
              struct.setRoad_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distance = iprot.readDouble();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIdentity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'identity' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DropOffEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.car_id != null) {
        oprot.writeFieldBegin(CAR_ID_FIELD_DESC);
        struct.car_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dropoff_coord != null) {
        oprot.writeFieldBegin(DROPOFF_COORD_FIELD_DESC);
        struct.dropoff_coord.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
      oprot.writeI64(struct.identity);
      oprot.writeFieldEnd();
      if (struct.road_id != null) {
        if (struct.isSetRoad_id()) {
          oprot.writeFieldBegin(ROAD_ID_FIELD_DESC);
          struct.road_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistance()) {
        oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
        oprot.writeDouble(struct.distance);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DropOffEdgeTupleSchemeFactory implements SchemeFactory {
    public DropOffEdgeTupleScheme getScheme() {
      return new DropOffEdgeTupleScheme();
    }
  }

  private static class DropOffEdgeTupleScheme extends TupleScheme<DropOffEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DropOffEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.car_id.write(oprot);
      struct.dropoff_coord.write(oprot);
      oprot.writeI64(struct.identity);
      BitSet optionals = new BitSet();
      if (struct.isSetRoad_id()) {
        optionals.set(0);
      }
      if (struct.isSetDistance()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRoad_id()) {
        struct.road_id.write(oprot);
      }
      if (struct.isSetDistance()) {
        oprot.writeDouble(struct.distance);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DropOffEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.car_id = new CarID();
      struct.car_id.read(iprot);
      struct.setCar_idIsSet(true);
      struct.dropoff_coord = new Coordinate();
      struct.dropoff_coord.read(iprot);
      struct.setDropoff_coordIsSet(true);
      struct.identity = iprot.readI64();
      struct.setIdentityIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.road_id = new RoadId();
        struct.road_id.read(iprot);
        struct.setRoad_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.distance = iprot.readDouble();
        struct.setDistanceIsSet(true);
      }
    }
  }

}

